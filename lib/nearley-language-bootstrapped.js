// Generated automatically by nearley
(function () {
var grammar = {
    ParserRules: [ {"name": "final","postprocess":  function(d) { return d[1]; } ,"symbols":[ "whit?", "prog", "whit?" ]}, {"name": "prog","postprocess":  function(d) { return [d[0]]; } ,"symbols":[ "prod" ]}, {"name": "prog","postprocess":  function(d) { return [d[0]].concat(d[2]); } ,"symbols":[ "prod", "whit", "prog" ]}, {"name": "prod","postprocess":  function(d) { return {name: d[0], rules: d[5]}; } ,"symbols":[ "word", "whit?", {"literal":"-"}, {"literal":">"}, "whit?", "expression+" ]}, {"name": "prod","postprocess":  function(d) { return {body: d[2]}; } ,"symbols":[ {"literal":"@"}, "whit?", "js" ]}, {"name": "expression+","symbols":[ "completeexpression" ]}, {"name": "expression+","postprocess":  function(d) { return d[0].concat([d[4]]); } ,"symbols":[ "expression+", "whit?", {"literal":"|"}, "whit?", "completeexpression" ]}, {"name": "completeexpression","postprocess":  function(d) { return {tokens: d[0]}; } ,"symbols":[ "expr" ]}, {"name": "completeexpression","postprocess":  function(d) { return {tokens: d[0], postprocess: d[2]}; } ,"symbols":[ "expr", "whit?", "js" ]}, {"name": "expr","symbols":[ "word" ]}, {"name": "expr","symbols":[ "string" ]}, {"name": "expr","symbols":[ "charclass" ]}, {"name": "expr","postprocess":  function(d){ return d[0].concat([d[2]]); } ,"symbols":[ "expr", "whit", "word" ]}, {"name": "expr","postprocess":  function(d){ return d[0].concat([d[2]]); } ,"symbols":[ "expr", "whit", "string" ]}, {"name": "expr","postprocess":  function(d) { return d[0].concat([d[2]]); } ,"symbols":[ "expr", "whit", "charclass" ]}, {"name": "word","postprocess":  function(d){ return d[0]; } ,"symbols":[ /[\w\?\+]/ ]}, {"name": "word","postprocess":  function(d){ return d[0]+d[1]; } ,"symbols":[ "word", /[\w\?\+]/ ]}, {"name": "string","postprocess":  function(d) { return { literal: d[1].join("") }; } ,"symbols":[ {"literal":"\""}, "charset", {"literal":"\""} ]}, {"name": "charset","symbols":[  ]}, {"name": "charset","postprocess":  function(d) { return d[0].concat([d[1]]); } ,"symbols":[ "charset", "char" ]}, {"name": "char","postprocess":  function(d) { return d[0]; } ,"symbols":[ /[^\\"]/ ]}, {"name": "char","postprocess":  function(d) { return JSON.parse("\""+"\\"+d[1]+"\""); } ,"symbols":[ {"literal":"\\"}, /./ ]}, {"name": "charclass","postprocess":  function(d) { return new RegExp("."); } ,"symbols":[ {"literal":"."} ]}, {"name": "charclass","postprocess":  function(d) { return new RegExp("[" + d[1].join('') + "]"); } ,"symbols":[ {"literal":"["}, "charclassmembers", {"literal":"]"} ]}, {"name": "charclassmembers","symbols":[  ]}, {"name": "charclassmembers","postprocess":  function(d) { return d[0].concat([d[1]]); } ,"symbols":[ "charclassmembers", "charclassmember" ]}, {"name": "charclassmember","postprocess":  function(d) { return d[0]; } ,"symbols":[ /[^\\\]]/ ]}, {"name": "charclassmember","postprocess":  function(d) { return d[0] + d[1]; } ,"symbols":[ {"literal":"\\"}, /./ ]}, {"name": "js","postprocess":  function(d) { return d[2]; } ,"symbols":[ {"literal":"{"}, {"literal":"%"}, "jscode", {"literal":"%"}, {"literal":"}"} ]}, {"name": "jscode","postprocess":  function() {return "";} ,"symbols":[  ]}, {"name": "jscode","postprocess":  function(d) {return d[0] + d[1];} ,"symbols":[ "jscode", /[^%]/ ]}, {"name": "whit","symbols":[ "whitraw" ]}, {"name": "whit","symbols":[ "whitraw?", "comment", "whit?" ]}, {"name": "whit?","symbols":[  ]}, {"name": "whit?","symbols":[ "whit" ]}, {"name": "whitraw","symbols":[ /[\s]/ ]}, {"name": "whitraw","symbols":[ "whitraw", /[\s]/ ]}, {"name": "whitraw?","symbols":[  ]}, {"name": "whitraw?","symbols":[ "whitraw" ]}, {"name": "comment","symbols":[ {"literal":"#"}, "commentchars", {"literal":"\n"} ]}, {"name": "commentchars","symbols":[  ]}, {"name": "commentchars","symbols":[ "commentchars", /[^\n]/ ]} ]
  , ParserStart: "final"
}
if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {
   module.exports = grammar;
} else {
   window.grammar = grammar;
}
})();
